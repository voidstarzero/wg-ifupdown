#!/usr/bin/env bash

function runcmd {
    [[ $VERBOSITY == 1 ]] && echo "$@" >&2
    "$@"
}

# Given an IP range in CIDR notation, adds it as a route
function addroutes {
    # TODO: Some form of route summarization
    while read ip_route; do
        # TODO: Don't add routes already covered
        runcmd ip route add $ip_route dev "$IFACE"
    done
}

if [[ "$IFACE" == wg* ]]; then
    # Don't default to this, as adding the interface address automatically
    # creates a standard route to that subnet. Careful selection of the prefix
    # length in the 'address' field on each host should render this unnecessay,
    # unless (e.g.) you are routing additional blocks to hosts.
    if [[ "$IF_WG_AUTOROUTE" == yes ]]; then
        # Wireguard itself is best-positioned to know what IPs are allowed to
        # traverse each peer. It can dump a list of "public-key\tallowed-ip"
        # pairs with the following command.
        runcmd wg show "$IFACE" allowed-ips | cut -f 2 | addroutes
    fi

    # Allow adding manual routes using the 'wg-addroute' directive as well.
    # This is useful e.g. if you have an AllowedIPs = 0.0.0.0/0 tunnel and
    # want to pick what actually gets sent down it.
    if [[ "$IF_WG_ADDROUTE" ]]; then
        addroutes <<< "$IF_WG_ADDROUTE"
    fi
fi
